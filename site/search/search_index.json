{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Welcome to GMod9 Lua Documentation! Here you will be able to find all required information to start writing your mods for GMod9. All informations either come from GMod9's lua/ folder or from Nafrayu. All the examples are licensed under WTFPL, so you can do whatever the fuck you want to with them.","title":"Home"},{"location":"#home","text":"Welcome to GMod9 Lua Documentation! Here you will be able to find all required information to start writing your mods for GMod9. All informations either come from GMod9's lua/ folder or from Nafrayu. All the examples are licensed under WTFPL, so you can do whatever the fuck you want to with them.","title":"Home"},{"location":"basics/","text":"Basics To mod GMod9 you need a basic understanding of Lua language. Lua is one of the easiest languages to learn. Here are basic things you need to know if you are starting with Lua: Scripts end with .lua extension You can use any text editor to write Lua code You don't need to compile anything To load the script on the fly, use lua_openscript console command Puting your script in lua/init folder will make it load every time ; are optional In if statements () are optional if not working with multiple things You can find full Lua documentation here: https://www.lua.org/manual/5.1/ Note that GMod9 uses Lua 5.0 while documentation is only available for 5.1+, so some things might not exist And here's how you do basic stuff: Defining a function function SayMyName(name) Msg(\"Your Name Is \" .. name) end Calling a function SayMyName(\"garry\") Commenting -- Calling the function boss. SayMyName(\"garry\") -- Called the function boss. If statement if name == \"garry\" then SayMyName(\"garry\") end if name == \"MingeBag\" then SayMyName(\"MingeBag\") end if name ~= \"garry\" then SayMyName(\"NOT garry or MingeBag\") end -- or if name == \"garry\" then SayMyName(\"garry\") elseif name == \"MingeBag\" then SayMyName(\"MingeBag\") else SayMyName(\"NOT garry or MingeBag\") end For statements for i = 0, 32 do Msg(\"Number \" .. i) end Variables -- Locals only exist within the function in which they're defined -- If you don't declare a variable as local it will exist globally by default local name = \"garry\" -- Tables are like arrays, they must be declared like so PlayerNames = {} -- and then you can fill them up like so PlayerNames[0] = \"david\" PlayerNames[1] = \"andrew\" Msg( \"Player 0's name is \" .. PlayerNames[0] ) -- The index doesn't have to be a number PlayerNames[\"test\"] = \"superdood\"; Msg( \"Player's name is \" .. PlayerNames[\"test\"] ) -- or Msg( \"Player's name is \" .. PlayerNames.test ) -- Variables aren't a set type and can hold anything Players = {} Players[0] = {} Players[0].name = \"Garry\" Players[0].money = 1000 Players[0].age = 32 -- They can even hold functions since they're a legitimate variable type function SayHello( ) Msg ( \"Hello\" ) end -- If we used SayHello() we would save the output the function instead of it Players[0].intro = SayHello Players[0].intro() -- which means you can also pass them to functions function SayPlayerHello ( in_function ) in_function() end SayPlayerHello( Players[0].intro ) Iterating over items in tables local money = { garry = 999, nafrayu = 69, mingebag = 0 } for name, amount in pairs(money) do Msg(name .. \" has $\" .. amount) end","title":"Basics"},{"location":"basics/#basics","text":"To mod GMod9 you need a basic understanding of Lua language. Lua is one of the easiest languages to learn. Here are basic things you need to know if you are starting with Lua: Scripts end with .lua extension You can use any text editor to write Lua code You don't need to compile anything To load the script on the fly, use lua_openscript console command Puting your script in lua/init folder will make it load every time ; are optional In if statements () are optional if not working with multiple things You can find full Lua documentation here: https://www.lua.org/manual/5.1/ Note that GMod9 uses Lua 5.0 while documentation is only available for 5.1+, so some things might not exist And here's how you do basic stuff:","title":"Basics"},{"location":"basics/#defining-a-function","text":"function SayMyName(name) Msg(\"Your Name Is \" .. name) end","title":"Defining a function"},{"location":"basics/#calling-a-function","text":"SayMyName(\"garry\")","title":"Calling a function"},{"location":"basics/#commenting","text":"-- Calling the function boss. SayMyName(\"garry\") -- Called the function boss.","title":"Commenting"},{"location":"basics/#if-statement","text":"if name == \"garry\" then SayMyName(\"garry\") end if name == \"MingeBag\" then SayMyName(\"MingeBag\") end if name ~= \"garry\" then SayMyName(\"NOT garry or MingeBag\") end -- or if name == \"garry\" then SayMyName(\"garry\") elseif name == \"MingeBag\" then SayMyName(\"MingeBag\") else SayMyName(\"NOT garry or MingeBag\") end","title":"If statement"},{"location":"basics/#for-statements","text":"for i = 0, 32 do Msg(\"Number \" .. i) end","title":"For statements"},{"location":"basics/#variables","text":"-- Locals only exist within the function in which they're defined -- If you don't declare a variable as local it will exist globally by default local name = \"garry\" -- Tables are like arrays, they must be declared like so PlayerNames = {} -- and then you can fill them up like so PlayerNames[0] = \"david\" PlayerNames[1] = \"andrew\" Msg( \"Player 0's name is \" .. PlayerNames[0] ) -- The index doesn't have to be a number PlayerNames[\"test\"] = \"superdood\"; Msg( \"Player's name is \" .. PlayerNames[\"test\"] ) -- or Msg( \"Player's name is \" .. PlayerNames.test ) -- Variables aren't a set type and can hold anything Players = {} Players[0] = {} Players[0].name = \"Garry\" Players[0].money = 1000 Players[0].age = 32 -- They can even hold functions since they're a legitimate variable type function SayHello( ) Msg ( \"Hello\" ) end -- If we used SayHello() we would save the output the function instead of it Players[0].intro = SayHello Players[0].intro() -- which means you can also pass them to functions function SayPlayerHello ( in_function ) in_function() end SayPlayerHello( Players[0].intro )","title":"Variables"},{"location":"basics/#iterating-over-items-in-tables","text":"local money = { garry = 999, nafrayu = 69, mingebag = 0 } for name, amount in pairs(money) do Msg(name .. \" has $\" .. amount) end","title":"Iterating over items in tables"},{"location":"defines/","text":"Defines Description Defines are variables used for giving human-readable names to things like animation IDs and such. Variables HUD_PRINTNOTIFY Description: Works like HUD_PRINTCONSOLE , doesn't seem to do anything special. Value : 1 Type: number For use with : _PrintMessage() , _PrintMessageAll() HUD_PRINTCONSOLE Description: Prints string in console, like _Msg() but for players. Value: 2 Type: number For use with: _PrintMessage() , _PrintMessageAll() HUD_PRINTTALK Description: Prints string in chat, like chat message. Value: 3 Type: number For use with: _PrintMessage() , _PrintMessageAll() HUD_PRINTCENTER Description: Prints string in the middle of the screen. Value: 4 Type: number For use with: _PrintMessage() , _PrintMessageAll() DEFAULT_PLAYER_MODEL Description: Is a model of default player model. Value: models/player.mdl Type: string For use with: Anything TEAM_UNASSIGNED Description: Stores TeamID for the default team used when teamplay is disabled. Value: 0 Type: number For use with: _PlayerChangeTeam() TEAM_SPECTATOR Description: Stores TeamID for the unused spectator team. Joining this team will cause glitches. Value: 1 Type: number For use with: _PlayerChangeTeam() TEAM_BLUE Description: Stores TeamID for the Blue team. Value: 2 Type: number For use with: _PlayerChangeTeam() TEAM_YELLOW Description: Stores TeamID for the Yellow team. Value: 3 Type: number For use with: _PlayerChangeTeam() TEAM_GREEN Description: Stores TeamID for the Green team. Value: 4 Type: number For use with: _PlayerChangeTeam() TEAM_UNASSIGNED Description: Stores TeamID for default team used when teamplay is disabled Value: 5 Type: number For use with: _PlayerChangeTeam()","title":"Defines"},{"location":"defines/#defines","text":"","title":"Defines"},{"location":"defines/#description","text":"Defines are variables used for giving human-readable names to things like animation IDs and such.","title":"Description"},{"location":"defines/#variables","text":"","title":"Variables"},{"location":"defines/#hud_printnotify","text":"Description: Works like HUD_PRINTCONSOLE , doesn't seem to do anything special. Value : 1 Type: number For use with : _PrintMessage() , _PrintMessageAll()","title":"HUD_PRINTNOTIFY"},{"location":"defines/#hud_printconsole","text":"Description: Prints string in console, like _Msg() but for players. Value: 2 Type: number For use with: _PrintMessage() , _PrintMessageAll()","title":"HUD_PRINTCONSOLE"},{"location":"defines/#hud_printtalk","text":"Description: Prints string in chat, like chat message. Value: 3 Type: number For use with: _PrintMessage() , _PrintMessageAll()","title":"HUD_PRINTTALK"},{"location":"defines/#hud_printcenter","text":"Description: Prints string in the middle of the screen. Value: 4 Type: number For use with: _PrintMessage() , _PrintMessageAll()","title":"HUD_PRINTCENTER"},{"location":"defines/#default_player_model","text":"Description: Is a model of default player model. Value: models/player.mdl Type: string For use with: Anything","title":"DEFAULT_PLAYER_MODEL"},{"location":"defines/#team_unassigned","text":"Description: Stores TeamID for the default team used when teamplay is disabled. Value: 0 Type: number For use with: _PlayerChangeTeam()","title":"TEAM_UNASSIGNED"},{"location":"defines/#team_spectator","text":"Description: Stores TeamID for the unused spectator team. Joining this team will cause glitches. Value: 1 Type: number For use with: _PlayerChangeTeam()","title":"TEAM_SPECTATOR"},{"location":"defines/#team_blue","text":"Description: Stores TeamID for the Blue team. Value: 2 Type: number For use with: _PlayerChangeTeam()","title":"TEAM_BLUE"},{"location":"defines/#team_yellow","text":"Description: Stores TeamID for the Yellow team. Value: 3 Type: number For use with: _PlayerChangeTeam()","title":"TEAM_YELLOW"},{"location":"defines/#team_green","text":"Description: Stores TeamID for the Green team. Value: 4 Type: number For use with: _PlayerChangeTeam()","title":"TEAM_GREEN"},{"location":"defines/#team_unassigned_1","text":"Description: Stores TeamID for default team used when teamplay is disabled Value: 5 Type: number For use with: _PlayerChangeTeam()","title":"TEAM_UNASSIGNED"},{"location":"events/","text":"Events Description In short, events are functions that get called when a certan thing happens, like when a player is joining or they get killed. Syntax HookEvent() Arguments: - name - Event type. Type: string - func - Function that will be executed on event. Type: function Returns: - id - ID of the hook used for unhooking. Type: number UnHookEvent() Arguments: - id - ID of the hook. Type: number Returns: Nothing Events eventPlayerActive(name, userid, steamid) eventPlayerConnect(name, address, steamid) eventPlayerDisconnect(name, userid, address, steamid, reason) eventPlayerChangeTeam(name, userid, new_team, old_team) eventPlayerKilled(userid, attacker, weapon) eventPlayerNameChange(userid, newname, oldname) eventPlayerHurt(userid, newhealth, attacker) PickDefaultSpawnTeam(userid) - Return false to choose a random valid team eventPlayerSpawn(userid) eventPlayerSpawnProp(userid, propname) - Return true to allow eventPlayerDuplicateProp(userid, propid) - Return true to allow eventPlayerSpawnRagdoll(userid, propname) - Return true to allow eventPlayerDuplicateRagdoll(userid, propid) - Return true to allow eventPlayerPropSpawned(userid, propid) eventPlayerRagdollSpawned(userid, propid) eventPlayerSay(userid, strText, bTeam) - Player will 'say' returned text if it's not empty eventPropBreak(breakerid, propid) eventNPCKilled(killerid, killed, inflictor) canPlayerHaveItem(playerid, item) - Return true if the player can pickup item eventPlayerUseEntity(playerid, entity) - Return true to disable default actions eventPlayerInitialSpawn(playerid) eventKeyPressed(playerid, in_key) eventKeyReleased(playerid, in_key) OnBalloonExplode(balloon, killer) onPhysTakeDamage(entid, inflictor, attacker) onTakeDamage(entid, inflictor, attacker, damage) onPlayerRemove(playerid, entity) - Return true if player can delete specified entity onGravGunPunt(playerid, entity) - Return true to allow onGravGunPickup(playerid, entity) - Return true to allow onGravGunLaunch(playerid, entity) - Return true to allow onGravGunDrop(playerid, entity) - Return true to allow onPhysPickup(playerid, entity) - Return true` to allow onPhysFreeze(playerid, entity) - Return true` to allow onPhysDrop(player, entity) - Return true to allow GetPlayerDamageScale(hitgroup) - Is set to 1 by default onShowHelp(userid) - By default bound to F1 onShowTeam(userid) - By default bound to F2 onShowSpare1(userid) - By default bound to F3 onShowSpare2(userid) - By default bound to F4 Examples Chat commands -- This will unhook previous hooks if exectuing another time if chat_commands then UnHookEvent(chat_commands.hook) end chat_commands = { prefix = \"!\", commands = { kill = function(playerid) _PlayerKill(playerid) end, yeet = function(playerid) _EntSetVelocity(playerid, vector3(0, 0, 999999999)) end } } chat_commands.hook = HookEvent(\"eventPlayerSay\", function(playerid, message, _) if string.find(message, chat_commands.prefix) ~= nil then string.gsub(message, chat_commands.prefix, \"\") for command, func in pairs(chat_commands.commands) do if string.find(message, command) ~= nil then func(playerid) end end end end)","title":"Events"},{"location":"events/#events","text":"","title":"Events"},{"location":"events/#description","text":"In short, events are functions that get called when a certan thing happens, like when a player is joining or they get killed.","title":"Description"},{"location":"events/#syntax","text":"","title":"Syntax"},{"location":"events/#hookevent","text":"Arguments: - name - Event type. Type: string - func - Function that will be executed on event. Type: function Returns: - id - ID of the hook used for unhooking. Type: number","title":"HookEvent()"},{"location":"events/#unhookevent","text":"Arguments: - id - ID of the hook. Type: number Returns: Nothing","title":"UnHookEvent()"},{"location":"events/#events_1","text":"","title":"Events"},{"location":"events/#eventplayeractivename-userid-steamid","text":"","title":"eventPlayerActive(name, userid, steamid)"},{"location":"events/#eventplayerconnectname-address-steamid","text":"","title":"eventPlayerConnect(name, address, steamid)"},{"location":"events/#eventplayerdisconnectname-userid-address-steamid-reason","text":"","title":"eventPlayerDisconnect(name, userid, address, steamid, reason)"},{"location":"events/#eventplayerchangeteamname-userid-new_team-old_team","text":"","title":"eventPlayerChangeTeam(name, userid, new_team, old_team)"},{"location":"events/#eventplayerkilleduserid-attacker-weapon","text":"","title":"eventPlayerKilled(userid, attacker, weapon)"},{"location":"events/#eventplayernamechangeuserid-newname-oldname","text":"","title":"eventPlayerNameChange(userid, newname, oldname)"},{"location":"events/#eventplayerhurtuserid-newhealth-attacker","text":"","title":"eventPlayerHurt(userid, newhealth, attacker)"},{"location":"events/#pickdefaultspawnteamuserid-return-false-to-choose-a-random-valid-team","text":"","title":"PickDefaultSpawnTeam(userid) - Return false to choose a random valid team"},{"location":"events/#eventplayerspawnuserid","text":"","title":"eventPlayerSpawn(userid)"},{"location":"events/#eventplayerspawnpropuserid-propname-return-true-to-allow","text":"","title":"eventPlayerSpawnProp(userid, propname) - Return true to allow"},{"location":"events/#eventplayerduplicatepropuserid-propid-return-true-to-allow","text":"","title":"eventPlayerDuplicateProp(userid, propid) - Return true to allow"},{"location":"events/#eventplayerspawnragdolluserid-propname-return-true-to-allow","text":"","title":"eventPlayerSpawnRagdoll(userid, propname) - Return true to allow"},{"location":"events/#eventplayerduplicateragdolluserid-propid-return-true-to-allow","text":"","title":"eventPlayerDuplicateRagdoll(userid, propid) - Return true to allow"},{"location":"events/#eventplayerpropspawneduserid-propid","text":"","title":"eventPlayerPropSpawned(userid, propid)"},{"location":"events/#eventplayerragdollspawneduserid-propid","text":"","title":"eventPlayerRagdollSpawned(userid, propid)"},{"location":"events/#eventplayersayuserid-strtext-bteam-player-will-say-returned-text-if-its-not-empty","text":"","title":"eventPlayerSay(userid, strText, bTeam) - Player will 'say' returned text if it's not empty"},{"location":"events/#eventpropbreakbreakerid-propid","text":"","title":"eventPropBreak(breakerid, propid)"},{"location":"events/#eventnpckilledkillerid-killed-inflictor","text":"","title":"eventNPCKilled(killerid, killed, inflictor)"},{"location":"events/#canplayerhaveitemplayerid-item-return-true-if-the-player-can-pickup-item","text":"","title":"canPlayerHaveItem(playerid, item) - Return true if the player can pickup item"},{"location":"events/#eventplayeruseentityplayerid-entity-return-true-to-disable-default-actions","text":"","title":"eventPlayerUseEntity(playerid, entity) - Return true to disable default actions"},{"location":"events/#eventplayerinitialspawnplayerid","text":"","title":"eventPlayerInitialSpawn(playerid)"},{"location":"events/#eventkeypressedplayerid-in_key","text":"","title":"eventKeyPressed(playerid, in_key)"},{"location":"events/#eventkeyreleasedplayerid-in_key","text":"","title":"eventKeyReleased(playerid, in_key)"},{"location":"events/#onballoonexplodeballoon-killer","text":"","title":"OnBalloonExplode(balloon, killer)"},{"location":"events/#onphystakedamageentid-inflictor-attacker","text":"","title":"onPhysTakeDamage(entid, inflictor, attacker)"},{"location":"events/#ontakedamageentid-inflictor-attacker-damage","text":"","title":"onTakeDamage(entid, inflictor, attacker, damage)"},{"location":"events/#onplayerremoveplayerid-entity-return-true-if-player-can-delete-specified-entity","text":"","title":"onPlayerRemove(playerid, entity) - Return true if player can delete specified entity"},{"location":"events/#ongravgunpuntplayerid-entity-return-true-to-allow","text":"","title":"onGravGunPunt(playerid, entity) - Return true to allow"},{"location":"events/#ongravgunpickupplayerid-entity-return-true-to-allow","text":"","title":"onGravGunPickup(playerid, entity) - Return true to allow"},{"location":"events/#ongravgunlaunchplayerid-entity-return-true-to-allow","text":"","title":"onGravGunLaunch(playerid, entity) - Return true to allow"},{"location":"events/#ongravgundropplayerid-entity-return-true-to-allow","text":"","title":"onGravGunDrop(playerid, entity) - Return true to allow"},{"location":"events/#onphyspickupplayerid-entity-returntrue-to-allow","text":"","title":"onPhysPickup(playerid, entity) - Returntrue` to allow"},{"location":"events/#onphysfreezeplayerid-entity-returntrue-to-allow","text":"","title":"onPhysFreeze(playerid, entity) - Returntrue` to allow"},{"location":"events/#onphysdropplayer-entity-return-true-to-allow","text":"","title":"onPhysDrop(player, entity) - Return true to allow"},{"location":"events/#getplayerdamagescalehitgroup-is-set-to-1-by-default","text":"","title":"GetPlayerDamageScale(hitgroup) - Is set to 1 by default"},{"location":"events/#onshowhelpuserid-by-default-bound-to-f1","text":"","title":"onShowHelp(userid) - By default bound to F1"},{"location":"events/#onshowteamuserid-by-default-bound-to-f2","text":"","title":"onShowTeam(userid) - By default bound to F2"},{"location":"events/#onshowspare1userid-by-default-bound-to-f3","text":"","title":"onShowSpare1(userid) - By default bound to F3"},{"location":"events/#onshowspare2userid-by-default-bound-to-f4","text":"","title":"onShowSpare2(userid) - By default bound to F4"},{"location":"events/#examples","text":"","title":"Examples"},{"location":"events/#chat-commands","text":"-- This will unhook previous hooks if exectuing another time if chat_commands then UnHookEvent(chat_commands.hook) end chat_commands = { prefix = \"!\", commands = { kill = function(playerid) _PlayerKill(playerid) end, yeet = function(playerid) _EntSetVelocity(playerid, vector3(0, 0, 999999999)) end } } chat_commands.hook = HookEvent(\"eventPlayerSay\", function(playerid, message, _) if string.find(message, chat_commands.prefix) ~= nil then string.gsub(message, chat_commands.prefix, \"\") for command, func in pairs(chat_commands.commands) do if string.find(message, command) ~= nil then func(playerid) end end end end)","title":"Chat commands"},{"location":"faq/","text":"Frequently Asked Questions These are 5 most frequent questions regarding GMod9 and mods* Are there any nextbots? Nope. I know, that's amazing. What do you mean you like your PNGs that want to kill you?!?! LEAVE Is DarkRP in GMod9? LEAVE Are there any FnaF ragdolls? LEAVE Are there any maps from GMod13 Nafrayu ported some maps over to GMod9, without it they wouldn't work. The only(?) person that knows how to do that is Nafrayu, but please, don't spam his DMs just because you want to see some map in GMod9 Are there any mods from GMod13 No. GMod13 Lua and GMod9 Lua are too different and as you probably might've guessed, GMod9 Lua isn't as advanced as GMod13 Lua I only made this just to reply with LEAVE to cringe GMod13 things because yes","title":"Frequently Asked Questions"},{"location":"faq/#frequently-asked-questions","text":"These are 5 most frequent questions regarding GMod9 and mods*","title":"Frequently Asked Questions"},{"location":"faq/#are-there-any-nextbots","text":"Nope. I know, that's amazing. What do you mean you like your PNGs that want to kill you?!?! LEAVE","title":"Are there any nextbots?"},{"location":"faq/#is-darkrp-in-gmod9","text":"LEAVE","title":"Is DarkRP in GMod9?"},{"location":"faq/#are-there-any-fnaf-ragdolls","text":"LEAVE","title":"Are there any FnaF ragdolls?"},{"location":"faq/#are-there-any-maps-from-gmod13","text":"Nafrayu ported some maps over to GMod9, without it they wouldn't work. The only(?) person that knows how to do that is Nafrayu, but please, don't spam his DMs just because you want to see some map in GMod9","title":"Are there any maps from GMod13"},{"location":"faq/#are-there-any-mods-from-gmod13","text":"No. GMod13 Lua and GMod9 Lua are too different and as you probably might've guessed, GMod9 Lua isn't as advanced as GMod13 Lua I only made this just to reply with LEAVE to cringe GMod13 things because yes","title":"Are there any mods from GMod13"},{"location":"playerinfo/","text":"_PlayerInfo() Description _PlayerInfo() is used, as it's name suggests, for getting player's information. Syntax _PlayerInfo() Arguments: - playerid - ID of the player. Type: number - request - Requested variable. Type: string Returns: - state - State of request for specified player. Type: depends on request Requests Here's a list of every known request parameter: - connected : returns if connected, type: bool - health : returns player's health, type: number - armor : returns player's armor, type: number - alive : returns true if player is alive, type: bool Examples Healthy spam function loop() for playerid = 1, _MaxPlayers() do if _PlayerInfo(playerid, \"connected\") == true then _PrintMessageAll(HUD_PRINTCONSOLE, _PlayerInfo(playerid, \"name\") .. \"'s Health is \" .. tostring(_PlayerInfo(playerid, \"health\")) .. \"%!\") end end end AddTimer(1, 0, loop)","title":"_PlayerInfo()"},{"location":"playerinfo/#_playerinfo","text":"","title":"_PlayerInfo()"},{"location":"playerinfo/#description","text":"_PlayerInfo() is used, as it's name suggests, for getting player's information.","title":"Description"},{"location":"playerinfo/#syntax","text":"","title":"Syntax"},{"location":"playerinfo/#_playerinfo_1","text":"Arguments: - playerid - ID of the player. Type: number - request - Requested variable. Type: string Returns: - state - State of request for specified player. Type: depends on request","title":"_PlayerInfo()"},{"location":"playerinfo/#requests","text":"Here's a list of every known request parameter: - connected : returns if connected, type: bool - health : returns player's health, type: number - armor : returns player's armor, type: number - alive : returns true if player is alive, type: bool","title":"Requests"},{"location":"playerinfo/#examples","text":"","title":"Examples"},{"location":"playerinfo/#healthy-spam","text":"function loop() for playerid = 1, _MaxPlayers() do if _PlayerInfo(playerid, \"connected\") == true then _PrintMessageAll(HUD_PRINTCONSOLE, _PlayerInfo(playerid, \"name\") .. \"'s Health is \" .. tostring(_PlayerInfo(playerid, \"health\")) .. \"%!\") end end end AddTimer(1, 0, loop)","title":"Healthy spam"},{"location":"reference/","text":"Lua Reference Player-related _PlayerShowScoreboard(playerid) - Shows the scoreboard on the specified players screen. _PlayerSetSprint(playerid, bool) - Enable/Disable sprint for player. _PlayerFreeze(playerid, bool) - Freeze the specified player. _PlayerGetShootPos(playerid) - Returns the vector of the player's shoot position. _PlayerGetShootAng(playerid) - Returns the forward vector of the player's shoot angle. _PlayerGetActiveWeapon(playerid) - Returns the player's active weapon id. _PlayerKill(playerid) - Kill the specified player. _PlayerGiveAmmo(playerid, amount, ammotype, playsounds) - Give specified player ammo. playersounds is bool. _PlayerRespawn(playerid) - Force player to respawn. _PlayerSetDrawTeamCircle(playerid, bool) - Sets whether to draw the team circle or not. _PlayerInfo(playerid, request) - Returns info about a specific layer. Check _PlayerInfo page for usage. _PlayerChangeTeam(playerid, teamid) - Changes a player's team. _PlayerSetModel(playerid, model) - Changes a player's model. _PlayerGetRandomAllowedModel() - Returns a random allowed player model. _PlayerSetHealth(playerid, health) - Changes a player's health. _PlayerSetArmor(playerid, armor) - Changes a player's armor. _PlayerSetMaxSpeed(playerid, speed) - Changes a player's maximum speed. _PlayerAddScore(playerid, score) - Add to players score (can be minus). _PlayerSetScore(playerid, score) - Sets to players score. _PlayerAddDeath(playerid, score) - Add to players deaths score (can be minus). _PlayerGiveItem(playerid, item) - Give player named item. _PlayerGiveSWEP(playerid, script) - Give player scripted weapon. _PlayerRemoveAllWeapons(playerid) - Strip all o a player's weapons. _PlayerRemoveWeapon(playerid, item) - Strip a specific weapon. _PlayerAllowDecalPaint(playerid) - Allow the player to spraypaint now rather than waiting the 30 or so seconds. _PlayerSetDrawViewModel(playerid, bool) - Sets whether to draw the player's view model. _PlayerSelectWeapon(playerid, item) - Select weapon. _PlayerSetDrawWorldModel(playerid, bool) - Sets whether to draw the player's world model. _PlayerOption(playerid, callback, timeout) - Player has an option to select. _PlayerSetVecView(playerid, vector) - Sets the position of the view vector (0, 0, 64) default. _PlayerIsKeyDown(playerid, key) - Check whether specified key is pressed. _PlayerSpectatorStart(playerid, mode) - Stop spectating mode. _PlayerSpectatorTarget(playerid, target) - Set Spectator target for player. _PlayerSpectatorEnd(playerid) - Stop spectating mode. _PlayerSetVecDuck(playerid, vector) - Sets the position of the duck view vector (0, 0, 24) default. _ScreenText(playerid, message, x, y, r, g, b, a, fadeid, fadeout, holdtime, effect, channel) - Advanced function to print text to the screen. effect can be set to 0-2 and channel 0-5. _PrintMessage(playerid, type, message) - Print a message to a specific player. _PrintMessageAll() - Is like _PrintMessage() but for everyone on the server. _PlayerPreferredModel(playerid) - Returns the player's preferred model. Returns a blank if the model isn't valid. _PlayerSilentKill(playerid, respawn_time, dissolve) - Silently kill a player. _PlayerDetonateTripmines(playerid) _PlayerHolsterWeapon(playerid) _PlayerSetFOV(playerid, fov, time) _PlayerSetFlashlight(playerid, state) _PlayerStopZooming(playerid) _PlayerSetChaseCamDistance(playerid, distance) _PlayerLockInPlace(playerid, bool) _PlayerRemoveAllAmmo(playerid) _PlayerDisableAttack(playerid, bool) _PlayerShowCrosshair(playerid, bool) _PlayerEnableSprint(playerid, bool) _PlayerViewModelSequence(playerid, sequence) - If successful returns the length of the sequence in seconds. _PlayerGetLimit(playerid, limit) _PlayerSetAnimation(playerid, sequence) - Sets a player's animation. _PlayerSetWeaponSequence(player, sequence) - Sets a players weapon activity. _PlayerIsCrouching(playerid) - Returns true if a player is crouching. _PlayerUseVehicle(playerid, vehicle) - Make a player attempt to enter a vehicle. _PlayerGod(playerid, bool) - Give a player God Mode. _PlayerHasWeapon(playerid, item) - Returns true if the player has this weapon. _PlayerWeaponTranslateSequence(player, sequence) - Let the player's weapon decide how we should act out specific sequence. _player.ShowPanel - Show/Hide a panel by name. _player.SetContextMenu(playerid, name) - Set the player's context menu. _player.GetFlashlight(player) - returns true if flashlight is on. _player.SetFlashlight(player, on) - Set player FL on/off. _player.LastHitGroup(player) - Get the las place the player was hit. _player.ShouldDropWeapon(player, bool) - Should player drop weapon on death? Entity-related _EntSetMaterial(entid, material_filename) - Set the material of specified entity. _EntSetGravity(entid, gravity) - Set the gravity for specified entity. _EntGetType(entid) - Returns a entity type name. _EntGetByName(name) - Returns an entity by target name (0 if not found). _EntGetPos(entid) - Returns a vector representing the position of the entity. _EntEmitSound(entid, filename) - Make entity emit sound. _EntEmitSoundEx(entid, filename, volume_multiplier, pitch_multiplier) - Make entity emit sound. _EntSetPos(entid, vector3 pos) - Sets the position of the entity. _EntGetVelocity(entid) - Gets the entity velocity. Returned as a vector3. _EntSetVelocity(entid, vector3_velocity) - Sets the velocity of the entity. _EntGetForwardVector(entid) - Returns the forward vector. _EntGetRightVector(entid) - Returns the right vector. _EntGetUpVector(entid) - Returns the up vector. _EntFire(entid, action, value, delay) - ent_fire an entity. _EntCreate(entname) - Creates but doesn't spawn specified entity. _EntSpawn(entindex) - Spawns specified entity. _EntActivate(entindex) - Activate an entity. _EntSetKeyValue(entindex, string_keyname, string_keyvalue) - Sets an entity keyvalue (Must be done before spawning!). _EntSetModel(ent, model_name) - Sets the model of an entity. PRE-CACHE THE MODEL FIRST. _EntSetOwner(ent, ownerid) - Sets the owner. _EntGetOwner(ent) - Gets the entity's owner. _EntRemove(entindex) - Removes entity.. _EntExists(entindex) - Check if entity exists. _EntPrecacheModel(model_name) - Pre-caches a model. _EntSetAng(entid, vector3_ang) - Sets the angle of the entity (using a forward vector). _EntSetAngAngle(entid, vector3_angle) - Sets the ANGLE of the entity. _EntGetAng(entid) - Returns the angle as a normalized 'forward' vector. _EntGetAngAngle(entid) - Returns the angle as a vector3. _EntGetModel(entid) - Returns the entity's model name. _EntitiesFindByClass(classname) - Returns a table of entities (or nil if none). _EntitiesFindInSphere(vector_position, radius) - Returns a table of entities contained in the sphere. _EntitiesFindByName(targetname) - Returns a table of entities (or nil if none). _EntityGetPhysicsAttacker(entity) - Returns the last physics attacker. _EntitySetPhyscsAttacker(entity, attacker) - Sets the physics attacker on a specified object. _EntSetGroundEntity(entity, groundentity) - Pass entity as -1 to clear the ground entity. _EntGetGroundEntity(entity, groundentity) - Pass entity as -1 to clear the ground entity. _EntSetMoveType(entity, type) - Sets the movetype. _EntGetMoveType(entity) - Gets the movetype. _EntSetMoveCollide(entity, type) - Sets the movecollide. _EntGetMoveCllide(entity) - Gets the movecollide. _EntSetSolid(entity, type) - Sets the solid type. _EntGetSolid(entity) - Gets the solid type. _EntSetCollisionGroup(entity, group) - Sets the collision group. _EntGetCollisionGroup(entity) - Gets the collision group. _EntGetWaterLevel(entity) - Returns a number representing how under water an entity is. 0 means not underwater. 3 is totally underwater. _EntSetActivity(entid, int_sequence) - Sets anactivity for an ent. Works for NPC's only. _EntGetDisposition(npc, entity) - Gets an enemy disposition. _EntSetParent(entid, parent, attachment) - Sets an entities parent. _EntGetParent(entid) - Gets an entities parent. _EntGetName(entid) - Gets an entities name. _EntSetName(entid, name) - Sets an entities name. _EntSetMaxHealth(entid, health) - Gets entity max health. _EntGetMaxHealth(entid) - Sets entity max health. Effects-related _EffectInit() - Resets the effect data _EffectSetOrigin(vector) _EffectSetAngles(vector) _EffectSetNormal(vector) _EffectSetStart(vector) _EffectSetEnt(entid) _EffectSetFlags(int) _EffectSetScale(float) _EffectSetMagnitude(float) _EffectSetRadius(float) _EffectSetAttachIndex(int) _EffectDispatch(name) File manipulation _file.Exists(filename) - Returns true if file exists. _file.Read(filename) - Reads a file into a string. _file.Write(filename, string) - Writes a string to a file. _file.CreateDir(folder) - Creates Dir Hierarchy. _file.IsDir(folder) - Returns true if is Dir. _file.Find(wildcard) - Finds files, returns table, parameter should be like \"maps/-.bsp\". _file.Delete(wildcard) - Deletes specified file. _file.Rename(before, after) - Renames specified file. _ForceFileConsistency(filename) - Force the file tobe the same on client and server. Should be called after pre-caching the file. Server-related _StartNextLevel(map_name) - Starts the next level. _GetNextMap() - Returns next map name. _GetCurrentMap() - Returns current map name. _GetRule(rule_string) - Gets a rule. _ServerCommand(command) - Runs a console command. Don't forget to put \\n in the end. _GameSetTargetIDRules(int_rule) - Sets targetID rules. _PluginMsg(userid, title, message, time, r, g, b, a, level) - Sends a plugin message. _PluginText(userid, title, message, time, r, g, b, a, level) - Sends plug in text. _GetConVar_Float(name) - Get a server convar float. _GetConVar_String(name) - Get a server convar string. _GetConVar_Bool(name) - Get a server convar bool. _GetClientConVar_String(userid, name) - Get a client convar string. _CurTime() - Returns the current time in seconds. _MaxPlayers() - Returns the max players in the server. _RunString(command) - Runs a command in the main gameplay script. _GetModPath() - Gets the path to the gmod folder (on the server). No trailing slash. _IsDedicatedServer() - Returns whether dedicated server or not. _Msg(message) - Outputs message to console. _OpenScript(filename) - Opens a script. _ALERT(message) - Internal Lua usage. Outputs error message. Trace _TraceAttack(victim, inflictor, attacker, amount) - Attack using the last trace. _TraceSetCollisionGroup(group) - Sets the collision group for the next trace to use. _TraceSetMask(group) - Sets the MASK_ to use for the next trace. _TraceLine(vector_start, vector_direction, length, ignore) - Traces a line. ignore is optional. _TraceEndPos() - Return the end pos from the last trace. _TraceFraction() - Return the fraction of trace completed. _TraceHitWorld() - Return the true if the last trace hit the world. _TraceHitNonWorld() - Return the true if the last trace hit non world. _TraceHit() - Return the true if the last trace hit something. _TraceGetEnt() - Return the entity that the last trace hit. _TraceGetSurfaceNormal - Return the normal of the surface that the trace hit. _TraceDidHitSky() - Returns true if last hit was the sky. _TraceDidHitHitbox() - Returns true if last hit was some kind of hitbox. _TraceGetTexture() - Returns the name of the texture that we hit. _TraceDidHitWater() - Returns true if we hit water. _MakeDecal(decal) - Makes a decal using the last trace. PlayerLookTrace(playerid, length) - Traces a line where player's looking Sounds _PlaySound(sound_name) - Play a sound. _PlaySoundPlayer(playerid, sound_name) - Play a sound to a specific player. GModText _GModText_Start(font_name) - Initialize the text. _GModText_SetPos(x, y) - Set Position. _GModText_AllowOffscreen(bool) - Allow the text to go offscreen. _GModText_SetEntity(entindex) - Set entity to hover over. _GModText_SetColor(r, g, b, a) - Set Colour. _GModText_SetTime(duration, fadein, fadeout) - Set Times. _GModText_SetDelay(delay) - Set delay time. _GModText_SetText(text) - Set Times. _GModText_SetAdditive(bool) - Set Additive mode. _GModText_SetEntityOffset(vector) - Set entity offset to draw the text at. _GModText_Send(player, index) - If player is 0 it is sent to everyone. Index says which slot this text should fill. _GModText_Hide(player, index, fade_time, delay) - Hides specified text. _GModText_HideAll(player) - Hides All texts. _GModText_SendAnimate(player, index, length, ease) - The same as normal send but will animate from Send to the new values. GModRect _GModRect_Start(material) - Initialize the rect. _GModRect_SetPos(x, y, width, height) - Set Position. _GModRect_SetEntity(entindex) - Set entity to hover over. _GModRect_SetColor(r, g, b, a) - Set Colour. _GModRect_SetTime(duration, fadein, fadeout) - Set Times. _GModRect_SetDelay(delay) - Set delay time. _GModRect_SetAdditive(bool) - Set Additive mode. _GModRect_SetEntityOffset(vector) - Set entity offset to draw the text at. _GModRect_Send(player, index) - If player is 0 it is sent to everyone. Index says which slot this text should fill. _GModRect_SendAnimate(player, index, length, ease) - If player is 0 it is sent to everyone. Index says which slot this text should fill. _GModRect_Hide(player, index, fade_time, delay) - Hides specified rect. _GModRect_HideAll(player) - Hides All rects. GModQuad _GModQuad_Hide(player, index, fade_time, delay) - Hides specified world quads. _GModQuad_HideAll(player) - Hides All world quads. _GModQuad_Start(material) - Initialize the quad. _GModQuad_SetVector(corner, vector) - Set a vector of one of the quad's corners. Acceptable corner values: 0-3. _GModQuad_SetTimings(delay, fadein, life, fadeout) - Set Timings. _GModQuad_SetEntity(entityid) - SetEntity to follow. _GModQuad_Send(player, index) - Send a quad to player. All players if player is 0. _GModQuad_SenAnimate(player, index, length, ease) - Send a quad to player. All players if player is 0. Game Events _gameevent.Start(name) - Starts a (fake) gameevent. _gameevent.SetString(name, value) - Set Variable. _gameevent.SetInt(name, value) - Set Variable. _gameevent.Fire() - Fire event. Spawnmenu _spawnmenu.AddItem(playerid, category, name, modelent) _spawnmenu.RemoveCategory(playerid, category) _spawnmenu.RemoveAll(playerid) _spawnmenu.SetCategory(playerid, category) NPC-related _SetDefaultRelationship(class, class, disposition) - Sets the default relationship between two life types. _npc.ExitScriptedSequence(ent) _npc.SetSchedule(end, sched) _npc.SetLastPosition(ent, vector) _npc.AddRelationship(ent, ent, disposition, priority) - priority is int Physics-related _phys.EnableMotion(entid, boo) - Enable/Disable motion. _phys.EnableDrag(entid, bool) - Enable/Disable drag. _phys.EnableGravity(entid, bool) - Enable/Disable gravity. _phys.EnableCollisions(entid, bool) - Enable/Disable Collisions. _phys.GetMass(entid) - Gets mass. _phys.SetMass(entid, mass) - Sets mass. _phys.Sleep(entid) - Make object sleep. _phys.Wake(entid) - Wake a sleeping object. _phys.IsAsleep(entid) - Check whatever object is rested. _phys.HasPhysics(entid) - Returns true if entity has a physics object. _phys.ConstraintSetEnts(constraint, entity_1, entity_2) - Set Entities for constraint. _phys.ApplyForceCenter(entid, force) - Pushes an object from the center. force is vector3. _phys.ApplyForceOffset(entid, force, worldpos) - Pushes an object from the center. force and worldpos are vector3. _phys.ApplyTorqueCenter(entid, force) - Apply torque to the object. force is vector3. Team-related _TeamAddScore(teamid, score) - Add score for a team. _TeamSetScore(teamid, score) - Set score for a team. _TeamNumPlayers(teamid) - Get the number of players on a team. _TeamCount() - Returns the number of teams _TeamScore(teamid) - Returns the total team score. _TeamSetName(teamid, name) - Sets the name of the team. Utilities _util.PlayerByName(name) - Returns playerid of player with name. _util.PlayerByUserId(userid) - Returns playerid. _util.EntsInBox(min, max) - Returns entities contained in a box. min and max are vectors. _util.DropToFloor(ent) - Drops entity to floor. _util.ScreenShake(pos, amp, frequency, duration, radius) - Shakes screen. _util.PointAtEntity(ent1, ent2) - Point one entity towards the other. SWEP-related All these function are only used when making SWEPs, check SWEP part. _WeaponScriptedAssign(weapon, script) Assign a script to a scripted weapon. _SWEPSetSound(weapon_index, action, sound) Sets SWEP sound. _SWEPUseAmmo(weapon_index, clip[0|1], amount) Takes ammo from SWEP gun. _SWEPUpdateVariables(weapon_index) Re-reads all the 'fetch' variables. You should call this if you have changed the accuracy etc. _SWEPRunString(weapon_index, string) Runs a Lua string in the weapon's Lua instance. _swep.GetClipAmmo(weapon_id, clip[0|1]) Get amount of ammo in a clip. _swep.SetClipAmmo(weapon_index, clip[0|1], clip) Get amount of ammo in a clip. _swep.GetDeathIcon(weapon_index) Gets death icon name. Weapon-related _WeaponSetModel(weapon_name, model_type, model_name) Sets weapon model. _WeaponSetSlot(weapon_name, slot, pos) - Sets weapon slot. _WeaponSetSound(weapon_name action, sound) - Sets weapon sound. _WeaponSetFOV(weapon_name, fov) - Sets a weapon's draw FOV. _WeaponFlipHands(weapon_name, bool) - Flips a weapon's hands. _WeaponSetDamage(weapon_name, damage) - Sets the damage that a bullet from this gun does. _WeaponSetup(weapon_name, anim_prefix, clip_size_1, clip_size_2, default_ammo_1, default_ammo_2, primary_ammo, secondary_ammo) - Sets animation prefix. 'Deprecated' _IsLinux() Would return true if running on a Linux server","title":"Lua Reference"},{"location":"reference/#lua-reference","text":"","title":"Lua Reference"},{"location":"reference/#player-related","text":"_PlayerShowScoreboard(playerid) - Shows the scoreboard on the specified players screen. _PlayerSetSprint(playerid, bool) - Enable/Disable sprint for player. _PlayerFreeze(playerid, bool) - Freeze the specified player. _PlayerGetShootPos(playerid) - Returns the vector of the player's shoot position. _PlayerGetShootAng(playerid) - Returns the forward vector of the player's shoot angle. _PlayerGetActiveWeapon(playerid) - Returns the player's active weapon id. _PlayerKill(playerid) - Kill the specified player. _PlayerGiveAmmo(playerid, amount, ammotype, playsounds) - Give specified player ammo. playersounds is bool. _PlayerRespawn(playerid) - Force player to respawn. _PlayerSetDrawTeamCircle(playerid, bool) - Sets whether to draw the team circle or not. _PlayerInfo(playerid, request) - Returns info about a specific layer. Check _PlayerInfo page for usage. _PlayerChangeTeam(playerid, teamid) - Changes a player's team. _PlayerSetModel(playerid, model) - Changes a player's model. _PlayerGetRandomAllowedModel() - Returns a random allowed player model. _PlayerSetHealth(playerid, health) - Changes a player's health. _PlayerSetArmor(playerid, armor) - Changes a player's armor. _PlayerSetMaxSpeed(playerid, speed) - Changes a player's maximum speed. _PlayerAddScore(playerid, score) - Add to players score (can be minus). _PlayerSetScore(playerid, score) - Sets to players score. _PlayerAddDeath(playerid, score) - Add to players deaths score (can be minus). _PlayerGiveItem(playerid, item) - Give player named item. _PlayerGiveSWEP(playerid, script) - Give player scripted weapon. _PlayerRemoveAllWeapons(playerid) - Strip all o a player's weapons. _PlayerRemoveWeapon(playerid, item) - Strip a specific weapon. _PlayerAllowDecalPaint(playerid) - Allow the player to spraypaint now rather than waiting the 30 or so seconds. _PlayerSetDrawViewModel(playerid, bool) - Sets whether to draw the player's view model. _PlayerSelectWeapon(playerid, item) - Select weapon. _PlayerSetDrawWorldModel(playerid, bool) - Sets whether to draw the player's world model. _PlayerOption(playerid, callback, timeout) - Player has an option to select. _PlayerSetVecView(playerid, vector) - Sets the position of the view vector (0, 0, 64) default. _PlayerIsKeyDown(playerid, key) - Check whether specified key is pressed. _PlayerSpectatorStart(playerid, mode) - Stop spectating mode. _PlayerSpectatorTarget(playerid, target) - Set Spectator target for player. _PlayerSpectatorEnd(playerid) - Stop spectating mode. _PlayerSetVecDuck(playerid, vector) - Sets the position of the duck view vector (0, 0, 24) default. _ScreenText(playerid, message, x, y, r, g, b, a, fadeid, fadeout, holdtime, effect, channel) - Advanced function to print text to the screen. effect can be set to 0-2 and channel 0-5. _PrintMessage(playerid, type, message) - Print a message to a specific player. _PrintMessageAll() - Is like _PrintMessage() but for everyone on the server. _PlayerPreferredModel(playerid) - Returns the player's preferred model. Returns a blank if the model isn't valid. _PlayerSilentKill(playerid, respawn_time, dissolve) - Silently kill a player. _PlayerDetonateTripmines(playerid) _PlayerHolsterWeapon(playerid) _PlayerSetFOV(playerid, fov, time) _PlayerSetFlashlight(playerid, state) _PlayerStopZooming(playerid) _PlayerSetChaseCamDistance(playerid, distance) _PlayerLockInPlace(playerid, bool) _PlayerRemoveAllAmmo(playerid) _PlayerDisableAttack(playerid, bool) _PlayerShowCrosshair(playerid, bool) _PlayerEnableSprint(playerid, bool) _PlayerViewModelSequence(playerid, sequence) - If successful returns the length of the sequence in seconds. _PlayerGetLimit(playerid, limit) _PlayerSetAnimation(playerid, sequence) - Sets a player's animation. _PlayerSetWeaponSequence(player, sequence) - Sets a players weapon activity. _PlayerIsCrouching(playerid) - Returns true if a player is crouching. _PlayerUseVehicle(playerid, vehicle) - Make a player attempt to enter a vehicle. _PlayerGod(playerid, bool) - Give a player God Mode. _PlayerHasWeapon(playerid, item) - Returns true if the player has this weapon. _PlayerWeaponTranslateSequence(player, sequence) - Let the player's weapon decide how we should act out specific sequence. _player.ShowPanel - Show/Hide a panel by name. _player.SetContextMenu(playerid, name) - Set the player's context menu. _player.GetFlashlight(player) - returns true if flashlight is on. _player.SetFlashlight(player, on) - Set player FL on/off. _player.LastHitGroup(player) - Get the las place the player was hit. _player.ShouldDropWeapon(player, bool) - Should player drop weapon on death?","title":"Player-related"},{"location":"reference/#entity-related","text":"_EntSetMaterial(entid, material_filename) - Set the material of specified entity. _EntSetGravity(entid, gravity) - Set the gravity for specified entity. _EntGetType(entid) - Returns a entity type name. _EntGetByName(name) - Returns an entity by target name (0 if not found). _EntGetPos(entid) - Returns a vector representing the position of the entity. _EntEmitSound(entid, filename) - Make entity emit sound. _EntEmitSoundEx(entid, filename, volume_multiplier, pitch_multiplier) - Make entity emit sound. _EntSetPos(entid, vector3 pos) - Sets the position of the entity. _EntGetVelocity(entid) - Gets the entity velocity. Returned as a vector3. _EntSetVelocity(entid, vector3_velocity) - Sets the velocity of the entity. _EntGetForwardVector(entid) - Returns the forward vector. _EntGetRightVector(entid) - Returns the right vector. _EntGetUpVector(entid) - Returns the up vector. _EntFire(entid, action, value, delay) - ent_fire an entity. _EntCreate(entname) - Creates but doesn't spawn specified entity. _EntSpawn(entindex) - Spawns specified entity. _EntActivate(entindex) - Activate an entity. _EntSetKeyValue(entindex, string_keyname, string_keyvalue) - Sets an entity keyvalue (Must be done before spawning!). _EntSetModel(ent, model_name) - Sets the model of an entity. PRE-CACHE THE MODEL FIRST. _EntSetOwner(ent, ownerid) - Sets the owner. _EntGetOwner(ent) - Gets the entity's owner. _EntRemove(entindex) - Removes entity.. _EntExists(entindex) - Check if entity exists. _EntPrecacheModel(model_name) - Pre-caches a model. _EntSetAng(entid, vector3_ang) - Sets the angle of the entity (using a forward vector). _EntSetAngAngle(entid, vector3_angle) - Sets the ANGLE of the entity. _EntGetAng(entid) - Returns the angle as a normalized 'forward' vector. _EntGetAngAngle(entid) - Returns the angle as a vector3. _EntGetModel(entid) - Returns the entity's model name. _EntitiesFindByClass(classname) - Returns a table of entities (or nil if none). _EntitiesFindInSphere(vector_position, radius) - Returns a table of entities contained in the sphere. _EntitiesFindByName(targetname) - Returns a table of entities (or nil if none). _EntityGetPhysicsAttacker(entity) - Returns the last physics attacker. _EntitySetPhyscsAttacker(entity, attacker) - Sets the physics attacker on a specified object. _EntSetGroundEntity(entity, groundentity) - Pass entity as -1 to clear the ground entity. _EntGetGroundEntity(entity, groundentity) - Pass entity as -1 to clear the ground entity. _EntSetMoveType(entity, type) - Sets the movetype. _EntGetMoveType(entity) - Gets the movetype. _EntSetMoveCollide(entity, type) - Sets the movecollide. _EntGetMoveCllide(entity) - Gets the movecollide. _EntSetSolid(entity, type) - Sets the solid type. _EntGetSolid(entity) - Gets the solid type. _EntSetCollisionGroup(entity, group) - Sets the collision group. _EntGetCollisionGroup(entity) - Gets the collision group. _EntGetWaterLevel(entity) - Returns a number representing how under water an entity is. 0 means not underwater. 3 is totally underwater. _EntSetActivity(entid, int_sequence) - Sets anactivity for an ent. Works for NPC's only. _EntGetDisposition(npc, entity) - Gets an enemy disposition. _EntSetParent(entid, parent, attachment) - Sets an entities parent. _EntGetParent(entid) - Gets an entities parent. _EntGetName(entid) - Gets an entities name. _EntSetName(entid, name) - Sets an entities name. _EntSetMaxHealth(entid, health) - Gets entity max health. _EntGetMaxHealth(entid) - Sets entity max health.","title":"Entity-related"},{"location":"reference/#effects-related","text":"_EffectInit() - Resets the effect data _EffectSetOrigin(vector) _EffectSetAngles(vector) _EffectSetNormal(vector) _EffectSetStart(vector) _EffectSetEnt(entid) _EffectSetFlags(int) _EffectSetScale(float) _EffectSetMagnitude(float) _EffectSetRadius(float) _EffectSetAttachIndex(int) _EffectDispatch(name)","title":"Effects-related"},{"location":"reference/#file-manipulation","text":"_file.Exists(filename) - Returns true if file exists. _file.Read(filename) - Reads a file into a string. _file.Write(filename, string) - Writes a string to a file. _file.CreateDir(folder) - Creates Dir Hierarchy. _file.IsDir(folder) - Returns true if is Dir. _file.Find(wildcard) - Finds files, returns table, parameter should be like \"maps/-.bsp\". _file.Delete(wildcard) - Deletes specified file. _file.Rename(before, after) - Renames specified file. _ForceFileConsistency(filename) - Force the file tobe the same on client and server. Should be called after pre-caching the file.","title":"File manipulation"},{"location":"reference/#server-related","text":"_StartNextLevel(map_name) - Starts the next level. _GetNextMap() - Returns next map name. _GetCurrentMap() - Returns current map name. _GetRule(rule_string) - Gets a rule. _ServerCommand(command) - Runs a console command. Don't forget to put \\n in the end. _GameSetTargetIDRules(int_rule) - Sets targetID rules. _PluginMsg(userid, title, message, time, r, g, b, a, level) - Sends a plugin message. _PluginText(userid, title, message, time, r, g, b, a, level) - Sends plug in text. _GetConVar_Float(name) - Get a server convar float. _GetConVar_String(name) - Get a server convar string. _GetConVar_Bool(name) - Get a server convar bool. _GetClientConVar_String(userid, name) - Get a client convar string. _CurTime() - Returns the current time in seconds. _MaxPlayers() - Returns the max players in the server. _RunString(command) - Runs a command in the main gameplay script. _GetModPath() - Gets the path to the gmod folder (on the server). No trailing slash. _IsDedicatedServer() - Returns whether dedicated server or not. _Msg(message) - Outputs message to console. _OpenScript(filename) - Opens a script. _ALERT(message) - Internal Lua usage. Outputs error message.","title":"Server-related"},{"location":"reference/#trace","text":"_TraceAttack(victim, inflictor, attacker, amount) - Attack using the last trace. _TraceSetCollisionGroup(group) - Sets the collision group for the next trace to use. _TraceSetMask(group) - Sets the MASK_ to use for the next trace. _TraceLine(vector_start, vector_direction, length, ignore) - Traces a line. ignore is optional. _TraceEndPos() - Return the end pos from the last trace. _TraceFraction() - Return the fraction of trace completed. _TraceHitWorld() - Return the true if the last trace hit the world. _TraceHitNonWorld() - Return the true if the last trace hit non world. _TraceHit() - Return the true if the last trace hit something. _TraceGetEnt() - Return the entity that the last trace hit. _TraceGetSurfaceNormal - Return the normal of the surface that the trace hit. _TraceDidHitSky() - Returns true if last hit was the sky. _TraceDidHitHitbox() - Returns true if last hit was some kind of hitbox. _TraceGetTexture() - Returns the name of the texture that we hit. _TraceDidHitWater() - Returns true if we hit water. _MakeDecal(decal) - Makes a decal using the last trace. PlayerLookTrace(playerid, length) - Traces a line where player's looking","title":"Trace"},{"location":"reference/#sounds","text":"_PlaySound(sound_name) - Play a sound. _PlaySoundPlayer(playerid, sound_name) - Play a sound to a specific player.","title":"Sounds"},{"location":"reference/#gmodtext","text":"_GModText_Start(font_name) - Initialize the text. _GModText_SetPos(x, y) - Set Position. _GModText_AllowOffscreen(bool) - Allow the text to go offscreen. _GModText_SetEntity(entindex) - Set entity to hover over. _GModText_SetColor(r, g, b, a) - Set Colour. _GModText_SetTime(duration, fadein, fadeout) - Set Times. _GModText_SetDelay(delay) - Set delay time. _GModText_SetText(text) - Set Times. _GModText_SetAdditive(bool) - Set Additive mode. _GModText_SetEntityOffset(vector) - Set entity offset to draw the text at. _GModText_Send(player, index) - If player is 0 it is sent to everyone. Index says which slot this text should fill. _GModText_Hide(player, index, fade_time, delay) - Hides specified text. _GModText_HideAll(player) - Hides All texts. _GModText_SendAnimate(player, index, length, ease) - The same as normal send but will animate from Send to the new values.","title":"GModText"},{"location":"reference/#gmodrect","text":"_GModRect_Start(material) - Initialize the rect. _GModRect_SetPos(x, y, width, height) - Set Position. _GModRect_SetEntity(entindex) - Set entity to hover over. _GModRect_SetColor(r, g, b, a) - Set Colour. _GModRect_SetTime(duration, fadein, fadeout) - Set Times. _GModRect_SetDelay(delay) - Set delay time. _GModRect_SetAdditive(bool) - Set Additive mode. _GModRect_SetEntityOffset(vector) - Set entity offset to draw the text at. _GModRect_Send(player, index) - If player is 0 it is sent to everyone. Index says which slot this text should fill. _GModRect_SendAnimate(player, index, length, ease) - If player is 0 it is sent to everyone. Index says which slot this text should fill. _GModRect_Hide(player, index, fade_time, delay) - Hides specified rect. _GModRect_HideAll(player) - Hides All rects.","title":"GModRect"},{"location":"reference/#gmodquad","text":"_GModQuad_Hide(player, index, fade_time, delay) - Hides specified world quads. _GModQuad_HideAll(player) - Hides All world quads. _GModQuad_Start(material) - Initialize the quad. _GModQuad_SetVector(corner, vector) - Set a vector of one of the quad's corners. Acceptable corner values: 0-3. _GModQuad_SetTimings(delay, fadein, life, fadeout) - Set Timings. _GModQuad_SetEntity(entityid) - SetEntity to follow. _GModQuad_Send(player, index) - Send a quad to player. All players if player is 0. _GModQuad_SenAnimate(player, index, length, ease) - Send a quad to player. All players if player is 0.","title":"GModQuad"},{"location":"reference/#game-events","text":"_gameevent.Start(name) - Starts a (fake) gameevent. _gameevent.SetString(name, value) - Set Variable. _gameevent.SetInt(name, value) - Set Variable. _gameevent.Fire() - Fire event.","title":"Game Events"},{"location":"reference/#spawnmenu","text":"_spawnmenu.AddItem(playerid, category, name, modelent) _spawnmenu.RemoveCategory(playerid, category) _spawnmenu.RemoveAll(playerid) _spawnmenu.SetCategory(playerid, category)","title":"Spawnmenu"},{"location":"reference/#npc-related","text":"_SetDefaultRelationship(class, class, disposition) - Sets the default relationship between two life types. _npc.ExitScriptedSequence(ent) _npc.SetSchedule(end, sched) _npc.SetLastPosition(ent, vector) _npc.AddRelationship(ent, ent, disposition, priority) - priority is int","title":"NPC-related"},{"location":"reference/#physics-related","text":"_phys.EnableMotion(entid, boo) - Enable/Disable motion. _phys.EnableDrag(entid, bool) - Enable/Disable drag. _phys.EnableGravity(entid, bool) - Enable/Disable gravity. _phys.EnableCollisions(entid, bool) - Enable/Disable Collisions. _phys.GetMass(entid) - Gets mass. _phys.SetMass(entid, mass) - Sets mass. _phys.Sleep(entid) - Make object sleep. _phys.Wake(entid) - Wake a sleeping object. _phys.IsAsleep(entid) - Check whatever object is rested. _phys.HasPhysics(entid) - Returns true if entity has a physics object. _phys.ConstraintSetEnts(constraint, entity_1, entity_2) - Set Entities for constraint. _phys.ApplyForceCenter(entid, force) - Pushes an object from the center. force is vector3. _phys.ApplyForceOffset(entid, force, worldpos) - Pushes an object from the center. force and worldpos are vector3. _phys.ApplyTorqueCenter(entid, force) - Apply torque to the object. force is vector3.","title":"Physics-related"},{"location":"reference/#team-related","text":"_TeamAddScore(teamid, score) - Add score for a team. _TeamSetScore(teamid, score) - Set score for a team. _TeamNumPlayers(teamid) - Get the number of players on a team. _TeamCount() - Returns the number of teams _TeamScore(teamid) - Returns the total team score. _TeamSetName(teamid, name) - Sets the name of the team.","title":"Team-related"},{"location":"reference/#utilities","text":"_util.PlayerByName(name) - Returns playerid of player with name. _util.PlayerByUserId(userid) - Returns playerid. _util.EntsInBox(min, max) - Returns entities contained in a box. min and max are vectors. _util.DropToFloor(ent) - Drops entity to floor. _util.ScreenShake(pos, amp, frequency, duration, radius) - Shakes screen. _util.PointAtEntity(ent1, ent2) - Point one entity towards the other.","title":"Utilities"},{"location":"reference/#swep-related","text":"All these function are only used when making SWEPs, check SWEP part. _WeaponScriptedAssign(weapon, script) Assign a script to a scripted weapon. _SWEPSetSound(weapon_index, action, sound) Sets SWEP sound. _SWEPUseAmmo(weapon_index, clip[0|1], amount) Takes ammo from SWEP gun. _SWEPUpdateVariables(weapon_index) Re-reads all the 'fetch' variables. You should call this if you have changed the accuracy etc. _SWEPRunString(weapon_index, string) Runs a Lua string in the weapon's Lua instance. _swep.GetClipAmmo(weapon_id, clip[0|1]) Get amount of ammo in a clip. _swep.SetClipAmmo(weapon_index, clip[0|1], clip) Get amount of ammo in a clip. _swep.GetDeathIcon(weapon_index) Gets death icon name.","title":"SWEP-related"},{"location":"reference/#weapon-related","text":"_WeaponSetModel(weapon_name, model_type, model_name) Sets weapon model. _WeaponSetSlot(weapon_name, slot, pos) - Sets weapon slot. _WeaponSetSound(weapon_name action, sound) - Sets weapon sound. _WeaponSetFOV(weapon_name, fov) - Sets a weapon's draw FOV. _WeaponFlipHands(weapon_name, bool) - Flips a weapon's hands. _WeaponSetDamage(weapon_name, damage) - Sets the damage that a bullet from this gun does. _WeaponSetup(weapon_name, anim_prefix, clip_size_1, clip_size_2, default_ammo_1, default_ammo_2, primary_ammo, secondary_ammo) - Sets animation prefix.","title":"Weapon-related"},{"location":"reference/#deprecated","text":"_IsLinux() Would return true if running on a Linux server","title":"'Deprecated'"},{"location":"sounds/","text":"Sounds Description The title is explains everything. If you want to play custom sounds, the client needs to download them using FastDL. There is also no way to stop a sound without using SourceMod. You can easily find and preview Half-Life 2 sounds on https://hl2sounds.ceifa.tv/ Variables _PlaySound() Arguments: - playerid - ID of the player. Type: number - filename - Path to file without sound/ . Type: string Returns: Nothing _PlaySoundAll() Arguments: - filename - Path to file without sound/ . Type: string Returns: Nothing _EntEmitSound() Arguments: - entid - ID of the entity. Type: number - filename - Path to file without sound/ . Type: string Returns: Nothing _EntEmitSoundEx() Arguments: - entid - ID of the entity. Type: number - filename - Path to file without sound/ . Type: string - volume_multiplier - Type: number - pitch_multiplier - Type: number Returns: Nothing Examples Emit sound effect when a player says certain words if csfx then UnHookEvent(csfx.hook) end csfx = { config = { -- Activator = Filename or table with possible options yeah = \"vo/npc/male01/yeah02.wav\", nice = { \"vo/npc/female01/nice01.wav\", \"vo/npc/female01/nice02.wav\", \"vo/npc/male01/nice.wav\" }, -- Here's how to create variables with spaces in them [\"oh no\"] = { \"vo/npc/alyx/ohno_startle01.wav\", \"vo/npc/alyx/ohno_startle03.wav\", \"vo/npc/male01/ohno.wav\", \"vo/npc/female01/ohno.wav\", } } } csfx.hook = HookEvent(\"eventPlayerSay\", function(playerid, message, _) message = string.lower(tostring(message)) for activator, filename in pairs(csfx.config) do if string.find(message, activator) ~= nil then -- If a sound file is used for NPC dialog then the player model will it's mouth if type(filename) == \"table\" then math.randomseed(_CurTime()) local filename_length = 0 for _ in filename do filename_length = filename_length + 1 end filename = filename[math.random(1, filename_length)] end _EntEmitSound(playerid, filename) -- We don't want to be able to play 10 diferent sounds at once, so we return return end end end)","title":"Sounds"},{"location":"sounds/#sounds","text":"","title":"Sounds"},{"location":"sounds/#description","text":"The title is explains everything. If you want to play custom sounds, the client needs to download them using FastDL. There is also no way to stop a sound without using SourceMod. You can easily find and preview Half-Life 2 sounds on https://hl2sounds.ceifa.tv/","title":"Description"},{"location":"sounds/#variables","text":"","title":"Variables"},{"location":"sounds/#_playsound","text":"Arguments: - playerid - ID of the player. Type: number - filename - Path to file without sound/ . Type: string Returns: Nothing","title":"_PlaySound()"},{"location":"sounds/#_playsoundall","text":"Arguments: - filename - Path to file without sound/ . Type: string Returns: Nothing","title":"_PlaySoundAll()"},{"location":"sounds/#_entemitsound","text":"Arguments: - entid - ID of the entity. Type: number - filename - Path to file without sound/ . Type: string Returns: Nothing","title":"_EntEmitSound()"},{"location":"sounds/#_entemitsoundex","text":"Arguments: - entid - ID of the entity. Type: number - filename - Path to file without sound/ . Type: string - volume_multiplier - Type: number - pitch_multiplier - Type: number Returns: Nothing","title":"_EntEmitSoundEx()"},{"location":"sounds/#examples","text":"","title":"Examples"},{"location":"sounds/#emit-sound-effect-when-a-player-says-certain-words","text":"if csfx then UnHookEvent(csfx.hook) end csfx = { config = { -- Activator = Filename or table with possible options yeah = \"vo/npc/male01/yeah02.wav\", nice = { \"vo/npc/female01/nice01.wav\", \"vo/npc/female01/nice02.wav\", \"vo/npc/male01/nice.wav\" }, -- Here's how to create variables with spaces in them [\"oh no\"] = { \"vo/npc/alyx/ohno_startle01.wav\", \"vo/npc/alyx/ohno_startle03.wav\", \"vo/npc/male01/ohno.wav\", \"vo/npc/female01/ohno.wav\", } } } csfx.hook = HookEvent(\"eventPlayerSay\", function(playerid, message, _) message = string.lower(tostring(message)) for activator, filename in pairs(csfx.config) do if string.find(message, activator) ~= nil then -- If a sound file is used for NPC dialog then the player model will it's mouth if type(filename) == \"table\" then math.randomseed(_CurTime()) local filename_length = 0 for _ in filename do filename_length = filename_length + 1 end filename = filename[math.random(1, filename_length)] end _EntEmitSound(playerid, filename) -- We don't want to be able to play 10 diferent sounds at once, so we return return end end end)","title":"Emit sound effect when a player says certain words"},{"location":"timers/","text":"Timers Description Timers are a way to make function run set amount of times every set amount of seconds To create a timer, use AddTimer() function. If you want to be able to stop a timer, you have to define a variable for storing timer's id. Then you can use HaltTimer() . Syntax AddTimer() Arguments: delay - Controls after what time(in seconds) the function will be called again. Type: number reps - Controls amount of loops. Setting to 0 will result in an infinite loop. Type: number func - Is a function that will be called by timer. Type: function ... - Additional arguments for func . Type: any Returns: id - ID of the timer. Type: number HaltTimer() Arguments: timer - ID of the timer you want to stop. Type: number Returns: Nothing Examples Spammy spam function spam() _PrintMessageAll(HUD_PRINTTALK, \"spammy spam\") end -- Every 2 seconds, up to 5 times, spam function will be called AddTimer(2, 5, spam) Virus function virus() if _PlayerInfo(1, \"health\") > 0 then _PlayerSetHealth(1, _PlayerInfo(1, \"health\") - 1) elseif _PlayerInfo(1, \"health\") == 0 then -- We 'accidentally' killed player _PlayerKill(1) _PrintMessage(1, HUD_PRINTTALK, \"Opps!\") HaltTimer(timer) end end -- 0 means infinite loop timer = AddTimer(0.01, 0, virus)","title":"Timers"},{"location":"timers/#timers","text":"","title":"Timers"},{"location":"timers/#description","text":"Timers are a way to make function run set amount of times every set amount of seconds To create a timer, use AddTimer() function. If you want to be able to stop a timer, you have to define a variable for storing timer's id. Then you can use HaltTimer() .","title":"Description"},{"location":"timers/#syntax","text":"","title":"Syntax"},{"location":"timers/#addtimer","text":"Arguments: delay - Controls after what time(in seconds) the function will be called again. Type: number reps - Controls amount of loops. Setting to 0 will result in an infinite loop. Type: number func - Is a function that will be called by timer. Type: function ... - Additional arguments for func . Type: any Returns: id - ID of the timer. Type: number","title":"AddTimer()"},{"location":"timers/#halttimer","text":"Arguments: timer - ID of the timer you want to stop. Type: number Returns: Nothing","title":"HaltTimer()"},{"location":"timers/#examples","text":"","title":"Examples"},{"location":"timers/#spammy-spam","text":"function spam() _PrintMessageAll(HUD_PRINTTALK, \"spammy spam\") end -- Every 2 seconds, up to 5 times, spam function will be called AddTimer(2, 5, spam)","title":"Spammy spam"},{"location":"timers/#virus","text":"function virus() if _PlayerInfo(1, \"health\") > 0 then _PlayerSetHealth(1, _PlayerInfo(1, \"health\") - 1) elseif _PlayerInfo(1, \"health\") == 0 then -- We 'accidentally' killed player _PlayerKill(1) _PrintMessage(1, HUD_PRINTTALK, \"Opps!\") HaltTimer(timer) end end -- 0 means infinite loop timer = AddTimer(0.01, 0, virus)","title":"Virus"},{"location":"traces/","text":"Traces Description Traces are invisible lines that can be used for stuff like checking if there's empty space in front of the player. Syntax _TraceLine() Arguments: - vector_start - Start of line. Type: vector - vector_direction - Rotates the line. Type: vector - length - Length of the line. Type: number - ignore - EntID that will not be detected. Type: number Returns: Nothing PlayerLookTrace() Arguments: - playerid - PlayerID of player. Type: number - length - Length of the line. Type: number Returns: Nothing _TraceHit() Arguments: Nothing Returns: - hit_something - Is true if trace hit something. Type: bool _TraceHitWorld() Arguments: Nothing Returns: - hit_world - Is true if trace hit world geometry. Type: bool _TraceHitNonWorld() Arguments: Nothing Returns: - hit_entity - Is true if trace hit entity. Type: bool _TraceDidHitWater() Arguments: Nothing Returns: - hit_water - Is true if trace hit water. Type: bool _TraceDidHitHitbox() Arguments: Nothing Returns: - hit_hitbox - Is true if trace hit hitbox. Type: bool _TraceDidHitSky() Arguments: Nothing Returns: - hit_sky - Is true if trace hit skybox. Type: bool _TraceGetEnt() Arguments: Nothing Returns: - entid - EntID of entity that was hit by trace. Returns 0 if no entity was found. Type: number _TraceGetTexture() Arguments: Nothing Returns: - texture - Texture of surface that was hit by trace. Returns **studio** if no geometry was hit. Type: string _TraceGetSurfaceNormal() Arguments: Nothing Returns: - texture - This is probably a normal map of the texture. Type: probably string _TraceFraction() Arguments: Nothing Returns: - percentage - Percentage of trace length that something was detected at. Type: number _TraceEndPos() Arguments: Nothing Returns: - vector - Vector with the end position of trace. Type: vector _TraceAttack() Arguments: - victim - EntID of target. Type: number - inflictor - EntID of damage inflictor. Type: number - attacker - EntID of attacker. Type: number - amount - Amount of damage. Type: number Returns: Nothing _TraceAttack() Arguments: - victim - EntID of target. Type: number - inflictor - EntID of damage inflictor. Type: number - attacker - EntID of attacker. Type: number - amount - Amount of damage. Type: number Returns: Nothing Examples Laser sight -- Thanks to Nafrayu for helping me understand this function laser_sight() for id = 1, _MaxPlayers() do PlayerLookTrace(id, 2048) if _TraceHit() == true and _TraceHitNonWorld() == true then _TraceAttack(_TraceGetEnt(), id, id, 10) end end end AddTimer(0, 0, laser_sight) Bunny Hopping","title":"Traces"},{"location":"traces/#traces","text":"","title":"Traces"},{"location":"traces/#description","text":"Traces are invisible lines that can be used for stuff like checking if there's empty space in front of the player.","title":"Description"},{"location":"traces/#syntax","text":"","title":"Syntax"},{"location":"traces/#_traceline","text":"Arguments: - vector_start - Start of line. Type: vector - vector_direction - Rotates the line. Type: vector - length - Length of the line. Type: number - ignore - EntID that will not be detected. Type: number Returns: Nothing","title":"_TraceLine()"},{"location":"traces/#playerlooktrace","text":"Arguments: - playerid - PlayerID of player. Type: number - length - Length of the line. Type: number Returns: Nothing","title":"PlayerLookTrace()"},{"location":"traces/#_tracehit","text":"Arguments: Nothing Returns: - hit_something - Is true if trace hit something. Type: bool","title":"_TraceHit()"},{"location":"traces/#_tracehitworld","text":"Arguments: Nothing Returns: - hit_world - Is true if trace hit world geometry. Type: bool","title":"_TraceHitWorld()"},{"location":"traces/#_tracehitnonworld","text":"Arguments: Nothing Returns: - hit_entity - Is true if trace hit entity. Type: bool","title":"_TraceHitNonWorld()"},{"location":"traces/#_tracedidhitwater","text":"Arguments: Nothing Returns: - hit_water - Is true if trace hit water. Type: bool","title":"_TraceDidHitWater()"},{"location":"traces/#_tracedidhithitbox","text":"Arguments: Nothing Returns: - hit_hitbox - Is true if trace hit hitbox. Type: bool","title":"_TraceDidHitHitbox()"},{"location":"traces/#_tracedidhitsky","text":"Arguments: Nothing Returns: - hit_sky - Is true if trace hit skybox. Type: bool","title":"_TraceDidHitSky()"},{"location":"traces/#_tracegetent","text":"Arguments: Nothing Returns: - entid - EntID of entity that was hit by trace. Returns 0 if no entity was found. Type: number","title":"_TraceGetEnt()"},{"location":"traces/#_tracegettexture","text":"Arguments: Nothing Returns: - texture - Texture of surface that was hit by trace. Returns **studio** if no geometry was hit. Type: string","title":"_TraceGetTexture()"},{"location":"traces/#_tracegetsurfacenormal","text":"Arguments: Nothing Returns: - texture - This is probably a normal map of the texture. Type: probably string","title":"_TraceGetSurfaceNormal()"},{"location":"traces/#_tracefraction","text":"Arguments: Nothing Returns: - percentage - Percentage of trace length that something was detected at. Type: number","title":"_TraceFraction()"},{"location":"traces/#_traceendpos","text":"Arguments: Nothing Returns: - vector - Vector with the end position of trace. Type: vector","title":"_TraceEndPos()"},{"location":"traces/#_traceattack","text":"Arguments: - victim - EntID of target. Type: number - inflictor - EntID of damage inflictor. Type: number - attacker - EntID of attacker. Type: number - amount - Amount of damage. Type: number Returns: Nothing","title":"_TraceAttack()"},{"location":"traces/#_traceattack_1","text":"Arguments: - victim - EntID of target. Type: number - inflictor - EntID of damage inflictor. Type: number - attacker - EntID of attacker. Type: number - amount - Amount of damage. Type: number Returns: Nothing","title":"_TraceAttack()"},{"location":"traces/#examples","text":"","title":"Examples"},{"location":"traces/#laser-sight","text":"-- Thanks to Nafrayu for helping me understand this function laser_sight() for id = 1, _MaxPlayers() do PlayerLookTrace(id, 2048) if _TraceHit() == true and _TraceHitNonWorld() == true then _TraceAttack(_TraceGetEnt(), id, id, 10) end end end AddTimer(0, 0, laser_sight)","title":"Laser sight"},{"location":"traces/#bunny-hopping","text":"","title":"Bunny Hopping"},{"location":"vectors/","text":"Vectors Description Vectors are used for everything postion-related. In Source, y and z axies are \"flipped\". That means that z is up-down and y is left-right. Syntax vector3() Arguments: - x - Type: number - y - Type: number - z - Type: number Returns: - vector - Type: vector3 vecString() Arguments: - vector - Type: vector3 Returns: - string - Type: string vecAdd() Arguments: - vector1 - Type: vector3 - vector2 - Type: vector3 Returns: - vector - Type: vector3 vecSub() Arguments: - vector1 - Type: vector3 - vector2 - Type: vector3 Returns: - vector - Type: vector3 vecMul() Arguments: - vector1 - Type: vector3 - vector2 - Type: vector3 or number Returns: - vector - Type: vector3 vecCrossProduct() Arguments: - vector1 - Type: vector3 - vector2 - Type: vector3 Returns: - vector - Type: vector3 vecDotProduct() Arguments: - vector1 - Type: vector3 - vector2 - Type: vector3 Returns: - vector - Type: vector3 vecNormalize() Arguments: - vector - Type: vector3 Returns: - normalized_vector - Type: vector3 vecLength() Arguments: - vector - Type: vector3 Returns: - length - Type: number","title":"Vectors"},{"location":"vectors/#vectors","text":"","title":"Vectors"},{"location":"vectors/#description","text":"Vectors are used for everything postion-related. In Source, y and z axies are \"flipped\". That means that z is up-down and y is left-right.","title":"Description"},{"location":"vectors/#syntax","text":"","title":"Syntax"},{"location":"vectors/#vector3","text":"Arguments: - x - Type: number - y - Type: number - z - Type: number Returns: - vector - Type: vector3","title":"vector3()"},{"location":"vectors/#vecstring","text":"Arguments: - vector - Type: vector3 Returns: - string - Type: string","title":"vecString()"},{"location":"vectors/#vecadd","text":"Arguments: - vector1 - Type: vector3 - vector2 - Type: vector3 Returns: - vector - Type: vector3","title":"vecAdd()"},{"location":"vectors/#vecsub","text":"Arguments: - vector1 - Type: vector3 - vector2 - Type: vector3 Returns: - vector - Type: vector3","title":"vecSub()"},{"location":"vectors/#vecmul","text":"Arguments: - vector1 - Type: vector3 - vector2 - Type: vector3 or number Returns: - vector - Type: vector3","title":"vecMul()"},{"location":"vectors/#veccrossproduct","text":"Arguments: - vector1 - Type: vector3 - vector2 - Type: vector3 Returns: - vector - Type: vector3","title":"vecCrossProduct()"},{"location":"vectors/#vecdotproduct","text":"Arguments: - vector1 - Type: vector3 - vector2 - Type: vector3 Returns: - vector - Type: vector3","title":"vecDotProduct()"},{"location":"vectors/#vecnormalize","text":"Arguments: - vector - Type: vector3 Returns: - normalized_vector - Type: vector3","title":"vecNormalize()"},{"location":"vectors/#veclength","text":"Arguments: - vector - Type: vector3 Returns: - length - Type: number","title":"vecLength()"}]}